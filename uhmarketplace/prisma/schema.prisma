// Anytime you make a change to this prisma file, you must run "npx prisma generate" in your terminal to keep the database up to date
// You can also run "npx prisma db pull" to ensure the Prisma schema is up to date. 
// Anytime you make a change to this prisma file, you must run "npx prisma generate" in your terminal to keep the database up to date
// You can also run "npx prisma db pull" to ensure the Prisma schema is up to date. 

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  name           String
  hashedPassword String
<<<<<<< HEAD
  emailVerified DateTime?
  posts Post[]
  role Role @default(USER)
  @@unique([email, name])
=======
  passwordResets   PasswordReset[] // Define the reverse relation to PasswordReset
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  token     String  
  expiresAt DateTime
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
>>>>>>> 60ac7f5 (Finished the login page, now I am working on the forgot password page, where there is currently a bug there)
}

model VerificationToken {
  id      Int      @id @default(autoincrement())
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
}

model Post {
  id Int @id@default(autoincrement())
  title String
  description String
  createdBy User @relation(fields: [authorEmail, authorName], references: [email, name])
  createdAt DateTime  @default(now())
  updatedAt DateTime @default(now())
  imageUrl String?
  authorEmail String
  authorName String
}

enum Role {
  USER
  ADMIN
}